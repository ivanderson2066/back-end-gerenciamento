from flask import Flask, request, jsonify, g
from functools import wraps
from firebase_admin import auth, credentials
import firebase_admin
from config import db
from flask_cors import CORS  # Importar CORS

app = Flask(__name__)

# Inicializa o Firebase Admin SDK com as credenciais do serviço
cred = credentials.Certificate('vicios-44d19-firebase-adminsdk-tm7ef-71f5ae5d66.json')

CORS(app)  # Permite todas as origens por padrão

# Middleware para verificar o token JWT de autenticação
def token_obrigatorio(f):
    @wraps(f)
    def decorado(*args, **kwargs):
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            return jsonify({'erro': 'Token de autenticação ausente ou inválido!'}), 403

        token = auth_header.split(' ')[1]
        try:
            # Verifica o token e obtém o usuário
            decoded_token = auth.verify_id_token(token)
            g.uid_usuario = decoded_token['uid']
        except Exception as e:
            return jsonify({'erro': 'Token inválido ou usuário não encontrado'}), 403

        return f(*args, **kwargs)
    return decorado

@app.route("/", methods=["GET"])
def home():
    return "API de gerenciamento de estoque funcionando!", 200

@app.route('/registrar', methods=['POST'])
def registrar():
    dados = request.json
    if not dados or not dados.get('email') or not dados.get('senha'):
        return jsonify({'erro': 'Email e senha são obrigatórios'}), 400

    try:
        usuario = auth.create_user(
            email=dados['email'],
            password=dados['senha']
        )
        return jsonify({'status': 'Usuário registrado com sucesso', 'uid': usuario.uid}), 201
    except Exception as e:
        return jsonify({'erro': str(e)}), 500

@app.route('/login', methods=['POST'])
def login():
    return jsonify({'status': 'Login bem-sucedido. Use o token JWT no cabeçalho para requisições autenticadas.'}), 200

@app.route("/item", methods=["POST"])
@token_obrigatorio
def criar_item():
    dados = request.json
    if not dados:
        return jsonify({"erro": "Dados do item são obrigatórios!"}), 400

    try:
        item_ref = db.collection('usuarios').document(g.uid_usuario).collection('itens').document()
        item_ref.set(dados)
        return jsonify({"status": "Item adicionado com sucesso!"}), 201
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

@app.route("/item/<id>", methods=["GET"])
@token_obrigatorio
def obter_item_por_id(id):
    try:
        item_ref = db.collection('usuarios').document(g.uid_usuario).collection('itens').document(id)
        item = item_ref.get()
        if item.exists:
            return jsonify(item.to_dict())
        else:
            return jsonify({"erro": "Item não encontrado!"}), 404
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

@app.route("/item/<id>", methods=["PUT"])
@token_obrigatorio
def atualizar_item_por_id(id):
    dados_atualizados = request.json
    try:
        item_ref = db.collection('usuarios').document(g.uid_usuario).collection('itens').document(id)
        item_ref.update(dados_atualizados)
        return jsonify({"status": "Item atualizado com sucesso!"})
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

@app.route("/item/<id>", methods=["DELETE"])
@token_obrigatorio
def remover_item_por_id(id):
    try:
        item_ref = db.collection('usuarios').document(g.uid_usuario).collection('itens').document(id)
        item_ref.delete()
        return jsonify({"status": "Item removido com sucesso!"})
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

@app.route("/itens", methods=["GET"])
@token_obrigatorio
def listar_todos_itens():
    try:
        itens_ref = db.collection('usuarios').document(g.uid_usuario).collection('itens').stream()
        itens = [item.to_dict() for item in itens_ref]
        return jsonify(itens)
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
